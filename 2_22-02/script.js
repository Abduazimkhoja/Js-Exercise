// lesson - 2 Operator, Comparision, Logical Operators

// prefix and postfix
let a = 1, b = 1;
let c = ++a; // переменная (a) увеличивается на 1 и записывается в переменную (c)
let d = b++; // переменная (b) записывается в переменую (d) и после увеличивается на 1

// Asdinment result

a = 2;
let x = 1 + (a *= 2);
// 1) вышитывает выражение в скобке (a = a * 2) = 4
// 2) прибавляет 1 + 4
// 3) (x) приравнивается 5

// Type conversion

"" + 1 + 0 
// добавляется в строку число 1, после добавляется число 0. ответ 10 в виде типа строка

"" - 1 + 0 
// минус преобразовывает srtring в number

true + false 
// (true = 1, false = 0). (1 + 0 = 1).

6 / "3" 
// при математических операциях, тип данных строка преобразутся в тип number

"2" * "3" 
// при математических операциях, тип данных строка преобразутся в тип number

4 + 5 + "px" 
// тут нужно учитывать особенность js (single-sret) поэтапное выполнения кода. сначало выполняется (4 + 5) после это число добавляется в строку

"$" + 4 + 5 
// в тип string добавляется 4, после добавляется 5.

"4" - 2 
// еслиб строка была пустой -2 проста преобразоваласьб в тип string. но из за того что в строке находиться число. - определяется как математической операцией и строка преобразовывается в тип number

"4px" - 2 
// тут похожая ситуация. НО тут есть буквы которая не дает преоброзовать строку в число и выдает ошибку NAN

" -9 " + 5  
// каверзный примерю. тут +5 не мат операция. а добавление значение в строку

" -9 " -5 
// проста (-) определяется как мат операция из за того что строка не пустая. и строка переобразовывается в тип number

null + 1  
// (null = 0). (0 + 1 = 1).

undefined + 1 
// undefined не имеет неопределенный.

" \t \n" - 2
// \t -> табуляция. \n -> перенос строки. строка заполнена пробелами и переносом строки

// comparisons
5 > 4 // true 5 больше чем 4
"apple" > "pineapple" // еслиб строки былиб одной длины ответ былб true
"2" > "12" // в ascii table 2 > 1
undefined == null // значение одинаковые true
undefined === null // значение одинаковые тип разный false
null == "\n0\n" //
null === +"\n0\n" //


